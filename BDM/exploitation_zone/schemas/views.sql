-- ************************VIEWS********************************

----------------------------------------------------------------
-- View 1: Calculate average shelf life
----------------------------------------------------------------
drop view if exists client.avg_shelf_life;
create view client.avg_shelf_life as
	with base as (
		select
			  p.product_id
			, p.label
			, p.type
			, s.shipment_id
			, s.date
			, s.expiry_date
			,"day"((s.expiry_date - s.date)) as shelf_life
			, s.branch_id
		from client.products p
		inner join client.shipments s
			on p.product_id = s.product_id
	)

	, agg1 as (
		select
			  type as product_type
			, avg(shelf_life) as avg_shelf_life
		from base
		group by type
		order by avg_shelf_life
	)

	select 
	*
	from agg1;



----------------------------------------------------------------
-- View 2: Calculate stocks remaining
----------------------------------------------------------------
drop view if exists client.remaining_stock;
create view client.remaining_stock as
	with base as (
		select
			  s.shipment_id
			, s.date as stock_in
			, s.product_id
			, p.label
			, s.branch_id
			, i.date as inv_date
			, i.quantity
			, row_number() over(partition by s.shipment_id order by i.date desc) as rn
		from client.shipments s
		inner join client.inventory i
			on s.shipment_id = i.shipment_id
		inner join client.products p
			on s.product_id = p.product_id
	)

	select 
		  shipment_id
		, product_id
		, label as product_label
		, quantity as stock_remaining
		, branch_id
	from base
	where rn = 1
	order by shipment_id;



----------------------------------------------------------------
-- View 3: Calculated stock waste and revenue loss
----------------------------------------------------------------
drop view if exists client.stock_waste;
create view client.stock_waste as
	with base as (
		select
			  s.shipment_id
			, s.date as stock_in
			, s.expiry_date
			, s.product_id
			, s.branch_id
			, ((s.expiry_date - s.date)/(60*60*24)) as shelf_life
			, s.quantity as original_qty
			, i.quantity
			, row_number() over(partition by s.shipment_id order by i.date) as rn
		from client.shipments s
		left join client.inventory i
			on s.shipment_id = i.shipment_id
			and i.date >= s.expiry_date
	)

	, summary as (
		select 
			  b.shipment_id
			, stock_in
			, expiry_date
			, b.product_id
			, p.label as product_label
			, p.type as product_type
			, shelf_life as shelf_life
			, original_qty
			, coalesce(quantity, 0) as stock_wasted
			, coalesce(quantity, 0) / cast(original_qty as float) as proportion_wasted
			, pp.selling_price
			, pp.selling_price * coalesce(quantity, 0) as revenue_lost
			, b.branch_id
		from base b
		inner join client.products p
			on b.product_id = p.product_id
		inner join client.product_prices pp
			on b.product_id = pp.product_id
			and b.shipment_id = pp.shipment_id
		where rn = 1
		order by shipment_id
	)

	select
	*
	from summary;



----------------------------------------------------------------
-- View 4: Calculate how close products are to expiry
----------------------------------------------------------------
drop view if exists client.duration_to_expiry;
create view client.duration_to_expiry as
	with base as (
		select
			  s.shipment_id
			, s.date as stock_in
			, s.product_id
			, p.label
			, s.expiry_date
			, s.branch_id
			, i.date as inv_date
			, i.quantity
			, row_number() over(partition by s.shipment_id order by i.date desc) as rn
		from client.shipments s
		inner join client.inventory i
			on s.shipment_id = i.shipment_id
		inner join client.products p
			on s.product_id = p.product_id
		where i.date <= '2012-03-03'
	)

	, summary as (
		select
			  shipment_id
			, product_id
			, label as product_label
			, expiry_date
			, quantity as qty_remaining
			, "day"((expiry_date - cast('2012-03-03' as date))) as days_to_expiry
		from base
		where rn = 1
	)

	, final as (
		select
			  *
			, case
				when days_to_expiry <= 3 then true
				else false
			  end as less_than_3days
			, case
				when days_to_expiry <= 7 then true
				else false
			  end as less_than_1week
			, case
				when days_to_expiry <= 30 then true
				else false
			  end as less_than_1month
			, case
				when days_to_expiry > 30 then true
				else false
			  end as more_than_1month
		from summary
		where days_to_expiry >= 0
	)

	select * from final;

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
-- View 5: Calculate profit margin improvement monthly
----------------------------------------------------------------
drop view if exists client.kpi;
create view client.kpi as
with base as (
	select pp.sid
	, p.type
	, pp.cost_price
	, pp.selling_price
	, pp.shipment_id
	from client.product_prices pp
	left join client.products p on p.product_id = pp.product_id
)
, base_type as (
	select b.sid
	, b.type
	, b.cost_price
	, b.selling_price
	, s.date
	, s.invoice_id
	, s.offer_id
	, s.sold_price
	, s.quantity
	, b.shipment_id
	from base b
	left join client.sales s on b.sid = s.item_id
	-- where s.date <= now()
	-- and s.date >= now() - interval '12' month
	where s.date <= '2017-01-01'
	and s.date >= date '2017-01-01' - interval '12' month
	-- and s.date >= now() - interval '12' month
)
, rev_profits as (
	select 
		  extract(MONTH from bt.date) as sales_month, bt.type as product_type
		, sum(case when bt.offer_id = '' then bt.sold_price else 0 end ) as revenue
		, sum(bt.sold_price) as rev_ttl
		, count(case when bt.offer_id = '' then bt.sold_price else 0 end ) as sales
		, count(bt.sold_price) as sales_ttl
		, sum(case when bt.offer_id = '' then bt.sold_price - (bt.cost_price * bt.quantity) else 0 end ) as profits
		, sum(bt.sold_price - (bt.cost_price * bt.quantity)) as profits_ttl
		, (case when bt.type in ('Bakery','Fruits&Vegetables','Dairy','Meats','Instant Foods') then 'True' else 'False' end) as perishable
	from base_type bt 
	group by sales_month, product_type
)
, sales_per_shipment as (
	select 
	extract(MONTH from b.date) as sales_month
	, b.type
	, sum(b.quantity) as ttl_sold
	, b.shipment_id
	from base_type b
	group by b.shipment_id, b.type, sales_month

)
, sales_w_prop_sold as (
	select 
	b.type
	, b.sales_month
	, cast(sum(b.ttl_sold) as float)/cast(sum(shpt.quantity) as float) as prop_sold 
	from sales_per_shipment b
	left join shipments shpt on b.shipment_id= shpt.shipment_id
	group by b.type, b.sales_month
)
, sales_w_prop_wasted as (
	select 
	b.type
	, b.sales_month
	, cast((sum(shpt.quantity) - sum(b.ttl_sold)) as float)/cast(sum(shpt.quantity) as float) as prop_wasted 
	from sales_per_shipment b
	left join shipments shpt on b.shipment_id= shpt.shipment_id
	where shpt.expiry_date <= now()
	group by b.type, b.sales_month
)
, rv_profits_w_prop_wastes as ( 
	select 
	rv.*
	, prop_wasted
	from rev_profits rv
	left join sales_w_prop_wasted sps on rv.product_type = sps.type and rv.sales_month = sps.sales_month
)
, rv_profits_w_prop_wasted_sold as (
	select 
	rv.*
	, sps.prop_sold
	from rv_profits_w_prop_wastes rv
	left join sales_w_prop_sold sps on rv.product_type = sps.type and rv.sales_month = sps.sales_month
)
, sales_w_prop_remaining as (
	select 
	b.type
	, b.sales_month
	, cast((sum(shpt.quantity) - sum(b.ttl_sold)) as float)/cast(sum(shpt.quantity) as float) as prop_rm 
	from sales_per_shipment b
	left join shipments shpt on b.shipment_id= shpt.shipment_id
	where shpt.expiry_date > now()
	group by b.type, b.sales_month
)
, sales_w_prop_close_to_expiry as (
	select 
	b.type
	, b.sales_month
	, cast((sum(shpt.quantity) - sum(b.ttl_sold)) as float)/cast(sum(shpt.quantity) as float) as prop_close_expiry 
	from sales_per_shipment b
	left join shipments shpt on b.shipment_id= shpt.shipment_id
	where shpt.expiry_date > now() - interval '1' month
	group by b.type, b.sales_month
)
, rv_profits_w_prop_remaining as (
	select 
	rv.*
	, (case when sps.prop_rm is null then 0 else sps.prop_rm end) as prop_rm
	from rv_profits_w_prop_wasted_sold rv
	left join sales_w_prop_remaining sps on rv.product_type = sps.type and rv.sales_month = sps.sales_month
)
, rv_profits_w_prop_close_to_expiry as (
	select 
	rv.*
	, (case when sps.prop_close_expiry is null then 0 else sps.prop_close_expiry end) as prop_close_expiry
	from rv_profits_w_prop_remaining rv
	left join sales_w_prop_close_to_expiry sps on rv.product_type = sps.type and rv.sales_month = sps.sales_month
)
, summary as ( 
	select * from rv_profits_w_prop_close_to_expiry
	order by sales_month desc
)
select * from summary;

-------
--Views 6: offers sold ---
-------
drop view if exists client.offers_sold;
create view client.offers_sold as
with base as (
	select offer_id 
	, count(*) as count_sold
	from client.sales
	where offer_id <> ''
	and date <= '2017-01-01'
	and date >= date '2017-01-01' - interval '12' month
	group by offer_id
)
, offers_items as (
	select b.offer_id
	, prd.label
	, count_sold
	from base b
	left join client.offer_details o on o.offer_id = b.offer_id
	left join client.product_prices p on o.item_id = p.sid
	left join client.products prd on prd.product_id = p.product_id
)
select * from offers_items;
------